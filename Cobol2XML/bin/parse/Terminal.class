import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;

public class Terminal implements Parser {
    // The name of the terminal
    private String name;

    // Flag to indicate whether the terminal should discard or accept input
    private boolean discard;

    // Constructor for Terminal class
    public Terminal(String name) {
        this.name = name;
        this.discard = false;
    }

    // Method to set the discard flag
    public void setDiscard(boolean discard) {
        this.discard = discard;
    }

    // Method to check if the terminal accepts the given list of assemblies
    public boolean accepts(List<Assembly> assemblies) {
        return match(assemblies).size() > 0;
    }

    // Method to find all assemblies in the given list that match this terminal
    public List<Assembly> match(List<Assembly> assemblies) {
        List<Assembly> result = new ArrayList<>();
        if (!discard) {
            result.add(new Assembly(name));
        }
        return result;
    }

    // Method to accept a visitor and apply it to this terminal
    public <T> T accept(ParserVisitor<T> visitor, List<Assembly> assemblies) {
        List<Assembly> visited = visitor.visitTerminal(this, assemblies);
        // Check if the visitor qualifies the visited assemblies
        if (visitor.peek().qualifies(visited)) {
            // Clone the visitor and add a random expansion and the terminal's name
            return visitor.clone().add(visitor.peek().randomExpansion(visitor.peek().maxDepth())).push(visitor.peek().toString());
        } else {
            return null;
        }
    }

    // Method to convert the terminal to a string representation
    public String toString() {
        // Use the accept method with a custom ParserVisitor to generate the string representation
        return accept(new ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor<ParserVisitor
