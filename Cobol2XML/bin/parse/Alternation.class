import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import java.util.Random;

public class Alternation extends Parser { // Alternation class extends Parser class
    private final List<Parser> subParsers; // List of Parser objects
    private final String name; // Name of the alternation

    // Constructor for Alternation class
    public Alternation(String name, Parser... subParsers) {
        super();
        this.name = name;
        this.subParsers = Collections.list(Collections.enumeration(List.of(subParsers)));
    }

    // Implementation of accept method from Parser interface
    @Override
    public boolean accept(ParserVisitor pv, ArrayList<Assembly> visited) {
        return pv.visitAlternation(this, visited);
    }

    // Implementation of signature method from Parser interface
    @Override
    public String signature() {
        return "(Lparse/ParserVisitor;Ljava/util/ArrayList<Lparse/Assembly;>;)V";
    }

    // Implementation of matchAndAssemble method from Parser interface
    @Override
    public List<Assembly> matchAndAssemble(List<Assembly> match) {
        List<Assembly> result = new ArrayList<>();
        for (Parser parser : subParsers) {
            List<Assembly> parserMatch = parser.match(match);
            if (!parserMatch.isEmpty()) {
                result.addAll(parserMatch);
            }
        }
        return result;
    }

    // Implementation of match method from Parser interface
    @Override
    public List<Assembly> match(List<Assembly> assemblies) {
        List<Assembly> result = new ArrayList<>();
        for (Assembly assembly : assemblies) {
            List<Assembly> match = assembly.match(subParsers);
            if (!match.isEmpty()) {
                result.addAll(match);
            }
        }
        return result;
    }

    // Implementation of toString method from Object class
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (Parser parser : subParsers) {
            sb.append(parser.toString());
            sb.append(toStringSeparator());
        }
        return sb.substring(0, sb.length() - toStringSeparator().length());
    }

    // Method to generate a random expansion of the alternation
    private List<Assembly> randomExpansion(int minDepth, int maxDepth) {
        List<Assembly> result = new ArrayList<>();
        Random random = new Random();
        int depth = random.nextInt(maxDepth - minDepth + 1) + minDepth;
        for (Parser parser : subParsers) {
            if (parser instanceof Terminal) {
                if (random.nextInt(depth) == 0) {
                    result.add(parser.randomAssembly());
                }
            } else {
                result.addAll(parser.randomExpansion(minDepth, depth));
            }
        }
        return result;
    }

    // Method to generate a random set of assemblies
    private List<Assembly> randomSettle(int size) {
        List<Assembly> result = new ArrayList<>();
        for (int i = 0; i < size; i++) {
            result.addAll(randomExpansion(0, 1));
        }
        return result;
    }
}
