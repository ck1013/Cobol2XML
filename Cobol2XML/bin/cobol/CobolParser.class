import cobol.CobolParser;
import cobol.parse.Alternation;
import cobol.parse.Parser;
import cobol.parse.tokens.Symbol;
import java.util.CollectionParser;
import java.util.Locale;
import java.util.ResourceBundle;
import parse.Terminal;

/**
 * A parser for COBOL programs.
 */
public class CobolParser extends Parser {

    /**
     * Constructs a new CobolParser instance.
     *
     * @param discard          The terminal to discard.
     * @param fullstop         The fullstop parser.
     * @param program_id       The program ID parser.
     * @param division         The division parser.
     * @param section          The section parser.
     * @param date_written     The date written parser.
     */
    public CobolParser(Terminal discard, CollectionParser<Parser> fullstop,
                       Alternation program_id, Alternation division,
                       cobol.SectionNameAssembler section,
                       cobol.DateAssembler date_written) {
        super(discard); // Call the superclass constructor
        this.fullstop = fullstop;
        this.program_id = program_id;
        this.division = division;
        this.section = section;
        this.date_written = date_written;
    }

    private CollectionParser<Parser> fullstop; // The fullstop parser
    private Alternation program_id; // The program ID parser
    private Alternation division; // The division parser
    private cobol.SectionNameAssembler section; // The section parser
    private cobol.DateAssembler date_written; // The date written parser

    /**
     * Parses the COBOL program.
     */
    @Override
    public void parse() {
        // Parse the program ID
        Parser result = program_id.parse();
        if (result instanceof cobol.Program_idAssembler) {
            cobol.Program_idAssembler assembler = (cobol.Program_idAssembler) result;
            assembler.setAssembler(this);
        }

        // Parse the division
        result = division.parse();
        if (result instanceof cobol.DivisionAssembler) {
            cobol.DivisionAssembler assembler = (cobol.DivisionAssembler) result;
            assembler.setAssembler(this);
        }

        // Parse the section
        result = section.parse();
        if (result instanceof cobol.SectionNameAssembler) {
            cobol.SectionNameAssembler assembler = (cobol.SectionNameAssembler) result;
            assembler.setAssembler(this);
        }

        // Parse the date written
        result = date_written.parse();
        if (result instanceof cobol.DateAssembler) {
            cobol.DateAssembler assembler = (cobol.DateAssembler) result;
            assembler.setAssembler(this);
        }
    }

    /**
     * Returns the program ID.
     *
     * @return The program ID.
     */
    @Override
    public String getProgramID() {
        return program_id.getProgramID();
    }

    /**
     * Returns the division name.
     *
     * @return The division name.
     */
    @Override
    public String getDivisionName() {
        return division.getDivisionName();
    }

    /**
     * Returns the section name.
     *
     * @return The section name.
     */
    @Override
    public String getSectionName() {
        return section.getSectionName();
    }

    /**
     * Returns the date written.
     *
     * @return The date written.
     */
    @Override
    public String getDateWritten() {
        return date_written.getDateWritten();
    }

    /**
     * Creates a new CobolParser instance.
     *
     * @param discard          The terminal to discard.
     * @param fullstop         The fullstop parser.
     * @param program_id       The program ID parser.
     * @param division         The division parser.
     * @param section          The section parser.
     * @param date_written     The date written parser.
     * @return A new CobolParser instance.
     */
    public static CobolParser create(Terminal discard,
                                    CollectionParser<Parser> fullstop,
                                    cobol.Program_idAssembler program_id,
                                    cobol.DivisionAssembler division,
                                    cobol.SectionNameAssembler section,
                                    cobol.DateAssembler date_written) {
        Alternation programId = new Alternation(discard, program_id);
        Alternation divisionName = new Alternation(discard, division);
        return new CobolParser(discard, fullstop, programId, divisionName, section, date_written);
    }
}
